package com.msee.mseetv.module.home.ui;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import android.os.Bundle;
import android.os.Message;
import android.support.v4.view.ViewPager;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewConfiguration;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.AnimationUtils;
import android.widget.ImageView;
import android.widget.PopupWindow;
import android.widget.TextView;
import android.widget.Toast;

import com.msee.mseetv.MseeApplication;
import com.msee.mseetv.R;
import com.msee.mseetv.base.BaseActivity;
import com.msee.mseetv.base.BaseEntity;
import com.msee.mseetv.module.home.adapter.BeautyAdapter;
import com.msee.mseetv.module.home.adapter.MyFragmentAdapter;
import com.msee.mseetv.module.home.api.HomeApi;
import com.msee.mseetv.module.home.entity.HotMessage;
import com.msee.mseetv.module.login.api.LoginApi;
import com.msee.mseetv.module.login.result.LoginResult;
import com.msee.mseetv.module.register.api.RegistApi;
import com.msee.mseetv.utils.L;
import com.viewpagerindicator.TabPageIndicator;

public class HomeActivity extends BaseActivity implements OnClickListener {
	private static final String TAG = "HomeActivity";
	private PopupWindow gossipNumWindow, sysMsgWindow;
	private View gossipNumView, sysMsgView;
	private ImageView homeBtn1, homeBtn2, homeBtn3;
	private Animation an1, an2;
	private static Boolean isExit = false;
	private TabPageIndicator indicator;
	private HomeApi homeApi;
	private LoginApi loginApi;
	private RegistApi registApi;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		MseeApplication.getInstance().activityList.add(this);
		getSupportActionBar().hide();
//		homeApi = new HomeApi(mGetDataHandler);
		loginApi = new LoginApi(mGetDataHandler);
//		registApi = new RegistApi(mGetDataHandler);
		
		setOverflowShowingAlways();
		initViews();
		loginApi.sendLogin();
//		registApi.sendEmailRegist();
	}

	private void setOverflowShowingAlways() {
		try {
			ViewConfiguration config = ViewConfiguration.get(this);
			Field menuKeyField = ViewConfiguration.class
					.getDeclaredField("sHasPermanentMenuKey");
			menuKeyField.setAccessible(true);
			menuKeyField.setBoolean(config, false);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void initViews() {
		setBeautyStyle();
		homeBtn1 = (ImageView) findViewById(R.id.imageView1);
		homeBtn2 = (ImageView) findViewById(R.id.imageView2);
		homeBtn3 = (ImageView) findViewById(R.id.imageView3);
		changeHomeBtnBg(R.drawable.home_btn_beauty2, R.drawable.home_btn_my1);
		homeBtn1.setOnClickListener(this);
		homeBtn2.setOnClickListener(this);
		homeBtn3.setOnClickListener(this);
		// homeBtn3.setOnTouchListener(new OnTouchListener() {
		// @Override
		// public boolean onTouch(View arg0, MotionEvent arg1) {
		// // TODO Autogenerated method stub
		// switch (arg1.getAction()) {
		// case MotionEvent.ACTION_DOWN:
		// // layout.startRippleAnimation();
		// // alphaAnimation1.start();
		// break;
		// case MotionEvent.ACTION_UP:
		// case MotionEvent.ACTION_POINTER_UP:
		// // layout.stopRippleAnimation();
		// // alphaAnimation1.cancel();
		// // imageview.setBackgroundResource(R.drawable.ic_launcher);
		// break;
		// default:
		// break;
		// }
		// return true;
		// }
		// });
	}

	/**
	 * 设置美人圈界面
	 */
	private void setBeautyStyle() {
		BeautyAdapter mBeautyAdapter = new BeautyAdapter(
				getSupportFragmentManager(), this);
		ViewPager pager = (ViewPager) findViewById(R.id.pager);
		ViewPager pager1 = (ViewPager) findViewById(R.id.pager1);
		pager.setVisibility(View.VISIBLE);
		pager1.setVisibility(View.GONE);
		pager.setAdapter(mBeautyAdapter);
		mBeautyAdapter.notifyDataSetChanged();
		indicator = (TabPageIndicator) findViewById(R.id.indicator);
		indicator.setVisibility(View.VISIBLE);
		indicator.setViewPager(pager);
	}

	/**
	 * 设置我的界面
	 */
	private void setMyStyle() {
		MyFragmentAdapter mFragmentAdapter = new MyFragmentAdapter(
				getSupportFragmentManager(), this);
		ViewPager pager1 = (ViewPager) findViewById(R.id.pager1);
		ViewPager pager = (ViewPager) findViewById(R.id.pager);
		pager.setVisibility(View.GONE);
		pager1.setVisibility(View.VISIBLE);
		pager1.removeAllViews();
		pager1.setAdapter(mFragmentAdapter);
		mFragmentAdapter.notifyDataSetChanged();
		TabPageIndicator indicator = (TabPageIndicator) findViewById(R.id.indicator);
		indicator.setVisibility(View.GONE);
		indicator.setViewPager(pager1);
	}

	/**
	 * 设置桃心键界面
	 */
	private void setGossipStyle() {

	}

	/**
	 * 聊天数目动画
	 */
	AnimationListener animationListener1 = new AnimationListener() {
		@Override
		public void onAnimationStart(Animation arg0) {
		}

		@Override
		public void onAnimationRepeat(Animation arg0) {
		}

		@Override
		public void onAnimationEnd(Animation arg0) {
			gossipNumView.clearAnimation();
			an2 = AnimationUtils.loadAnimation(getApplicationContext(),
					R.anim.home_btn_anims2);
			gossipNumView.startAnimation(an2);
		}
	};

	/**
	 * 数据请求成功
	 */
	public void getDataForView(Message msg) {
		super.getDataForView(msg);
		switch (msg.arg1) {
//		case HomeApi.LOAD_MESSAGE_LIST:
//			HotMessageResult hotMessageResult = ((BaseEntity<HotMessageResult>) msg.obj).result;
//			showSysMsgPop(hotMessageResult.getMsgList());
//			break;
		case LoginApi.LOAD_LOGIN:
			LoginResult loginResult= ((BaseEntity<LoginResult>) msg.obj).result;
			Log.e("", "------------"+loginResult.getStorageToken());
			Log.e("", "------------"+loginResult.getReason());
//			homeApi.sendHotMessageList();
			loginApi.sendGetToken();
			break;
			
		case LoginApi.LOAD_GETTOKEN:
			
			Log.e("", "------------"+((BaseEntity<String>) msg.obj).msg);
			break;
		default:
			break;
		}
	};

	/**
	 * 数据请求失败
	 */
	@Override
	public void getDataError(Message msg) {
		super.getDataError(msg);
		L.e("", "", "没有系统消息");
	}

	/**
	 * 显示系统消息
	 * 
	 * @param hotMessages
	 */
	private void showSysMsgPop(List<HotMessage> hotMessages) {
		sysMsgView = LayoutInflater.from(this).inflate(R.layout.hot_msg_pop,
				null);
		sysMsgWindow = new PopupWindow(sysMsgView,
				android.widget.LinearLayout.LayoutParams.FILL_PARENT, 80, true);
		sysMsgWindow.setAnimationStyle(android.R.style.Animation_Dialog);
		sysMsgWindow.setBackgroundDrawable(getResources().getDrawable(
				R.drawable.home_pop_bg1));
		sysMsgWindow.showAsDropDown(indicator, 0, 0);

		TextView msgTextView = (TextView) sysMsgView
				.findViewById(R.id.sys_msg_text);
		ImageView closeBtn = (ImageView) sysMsgView
				.findViewById(R.id.close_btn);

		closeBtn.setOnClickListener(this);
		msgTextView.setText("系统消息");
		List<String> strings = new ArrayList<String>();
		strings.add("系统消息");
		strings.add("系统消息1");
		strings.add("系统消息2");
		strings.add("系统消息3");
		strings.add("系统消息4");

	}

	/**
	 * 显示聊天数目
	 */
	private void showGossipNumPop() {
		gossipNumView = LayoutInflater.from(this).inflate(
				R.layout.home_msg_pop, null);
		gossipNumWindow = new PopupWindow(gossipNumView, 80, 80, true);
		gossipNumWindow.setAnimationStyle(android.R.style.Animation_Dialog);
		gossipNumWindow.setOutsideTouchable(true);
		gossipNumWindow.setFocusable(true);
		gossipNumWindow.setBackgroundDrawable(getResources().getDrawable(
				R.drawable.home_pop_bg1));
		gossipNumWindow.showAsDropDown(homeBtn2, homeBtn2.getWidth() / 2 - 40,
				homeBtn2.getHeight() / 5 - 15);
	}

	/**
	 * 双击退出函数
	 */
	private void exitBy2Click() {
		Timer tExit = null;
		if (isExit == false) {
			isExit = true; // 准备退出
			Toast.makeText(this, "快速点击两次退出程序", Toast.LENGTH_SHORT).show();
			tExit = new Timer();
			tExit.schedule(new TimerTask() {
				@Override
				public void run() {
					isExit = false; // 取消退出
				}
			}, 500); // 如果2秒钟内没有按下返回键，则启动定时器取消掉刚才执行的任务

		} else {
			MseeApplication.getInstance().exitApp();
		}
	}

	@Override
	public void onClick(View arg0) {
		switch (arg0.getId()) {
		case R.id.imageView1:
			changeHomeBtnBg(R.drawable.home_btn_beauty2,
					R.drawable.home_btn_my1);
			setBeautyStyle();
			showSysMsgPop(null);
			break;
		case R.id.imageView2:
			if (null != gossipNumWindow && gossipNumWindow.isShowing()) {
				gossipNumWindow.dismiss();
				gossipNumWindow = null;
			} else {
				showGossipNumPop();
				an1 = AnimationUtils.loadAnimation(getApplicationContext(),
						R.anim.home_btn_anims1);
				an1.setAnimationListener(animationListener1);
				gossipNumView.setAnimation(an1);
			}
			break;
		case R.id.imageView3:
			changeHomeBtnBg(R.drawable.home_btn_beauty1,
					R.drawable.home_btn_my2);
			setMyStyle();
			break;
		case R.id.close_btn:
			sysMsgWindow.dismiss();
			sysMsgWindow = null;
			break;
		default:
			break;
		}
	}

	/**
	 * 切换主页底部按钮背景
	 * 
	 * @param res1
	 * @param res3
	 */
	private void changeHomeBtnBg(int res1, int res3) {
		homeBtn1.setImageResource(res1);
		homeBtn3.setImageResource(res3);
	}

	/**
	 * 返回键响应
	 */
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			exitBy2Click(); // 调用双击退出函数
		}
		return false;
	}
}
